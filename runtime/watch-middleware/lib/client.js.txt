/* Client module for `--watch` mode */
(function(options) {
  function _error(str) {
    var style = [
      "position:fixed",
      "top:0",
      "left:0",
      "width:300px",
      "border:2px solid #f5c6cb",
      "color:#721c24",
      "background-color:#f8d7da",
      "text-align:left",
      "white-space:pre-wrap",
      "padding:14px 20px",
      "margin:20px",
      "font-size:14px"
    ].join(";");

    str = "Compilation error!\nSee the terminal for details."
    var content = "<pre style=\"" + style + "\">" + str + "</pre>";

    if (!errorDiv) {
      errorDiv = document.createElement("div");
      document.body.appendChild(errorDiv);
    }

    errorDiv.innerHTML = content;
  }

  function _reload(delay) {
    setTimeout(function() {
      console.log("[watch] reloading page");
      window.location.reload();
    }, delay || 0);
  }

  function _handle(type, data) {
    if (type === "reload") {
      _reload(data && data.delay);
    } else if (type === "init" || type === "done") {
      if (data) {
        if (data.error) {
          hash = "*";
          return _error(data.error);
        } else {
          if (hash && hash !== data.hash)
            _reload();
          hash = data.hash;
        }
      } else {
        if (!hash)
          hash = "*"; // currently compiling, reload when done
      }
    }
  }

  function _connect() {
    var socket = new WebSocket(options.serverUrl);

    socket.addEventListener("open", function() {
      retry = 0;
      console.log("[watch] connected");
    });

    // It appears that "close" comes even without "open" for the initial failure.
    // This behavior is observed in Chrome, Edge & Firefox.
    socket.addEventListener("close", function() {
      console.log("[watch] closed");

      if (options.reconnect === undefined || options.reconnect) {
        var delay = Math.round(100 * Math.pow(Math.min(retry++, 7), 2) + Math.random() * 100);
        setTimeout(function() {
          console.log("[watch] retrying (" + retry + " / " + delay + "ms)");
          _connect();
        }, delay);
      }
    });

    socket.addEventListener("message", function(event) {
      var payload = JSON.parse(event.data);
      _handle(payload.type, payload.data);
    });
  }

  var retry = 0;
  var hash;
  var errorDiv;

  _connect();
})(__GOURMET_WATCH_OPTIONS__);
